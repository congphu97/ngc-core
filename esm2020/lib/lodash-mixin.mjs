import { Observable } from 'rxjs';
import CryptoJS from 'crypto-js';
import moment from 'moment-timezone';
import _ from 'lodash';
const AES_IV = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');
const AES_HASH_KEY = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');
const ACCENTED_CHARACTER_MAP = {
    a: '[aàảãáạăằẳẵắặâầẩẫấậ]',
    d: '[dđ]',
    e: '[eèẻẽéẹêềểễếệ]',
    i: '[iìỉĩíị]',
    o: '[oòỏõóọôồổỗốộơờởỡớợ]',
    u: '[uùủũúụưừửữứự]',
    y: '[yỳỷỹýỵ]',
};
// eslint-disable-next-line @typescript-eslint/typedef, @typescript-eslint/explicit-function-return-type, @typescript-eslint/explicit-module-boundary-types
export const LODASH_MIXIN = {
    aesEncrypt: (data, key = AES_HASH_KEY, opts) => {
        let exp;
        if (opts && _.isString(opts.exp)) {
            const matched = opts.exp.match(/([0-9]+)([a-z]+)/);
            const expNum = Number(_.get(matched, 1));
            const expUnit = _.get(matched, 2);
            exp = expNum ? +moment().add(expNum, expUnit) : undefined;
        }
        data = JSON.stringify({ data, exp, salt: _.get(opts, 'salt') });
        return CryptoJS.AES.encrypt(data, key, { iv: AES_IV }).toString();
    },
    aesDecrypt: (code, key = AES_HASH_KEY, opts) => {
        try {
            const bytes = CryptoJS.AES.decrypt(code, key, { iv: AES_IV });
            let decoded = bytes.toString(CryptoJS.enc.Utf8);
            if (!decoded)
                throw new Error();
            decoded = JSON.parse(decoded);
            if ((decoded.salt && decoded.salt !== _.get(opts, 'salt'))
                || (decoded.exp && moment(decoded.exp).isBefore(moment())))
                throw new Error();
            return decoded.data;
        }
        catch { }
    },
    arrayInsert: (arr, item, index) => {
        arr = _.isArray(arr) ? arr : [];
        index === -1 || _.isNil(index) ? arr.push(item) : arr.splice(index, 0, item);
        return arr;
    },
    arrayJoin: (arr, joinSymbol = ', ') => {
        return _(arr).chain().filter((item) => !_.isNil(item) && item !== '').join(joinSymbol).value();
    },
    arrayUpdate: (arr, item, index) => {
        arr = _.isArray(arr) ? arr : [];
        index = _.isNil(index) ? _.indexOf(arr, item) : index;
        if (index !== -1)
            arr[index] = item;
        return arr;
    },
    arrayUpsert: (arr, item, index, type = 'push') => {
        arr = _.isArray(arr) ? arr : [];
        index = _.isNil(index) ? _.indexOf(arr, item) : index;
        if (index === -1) {
            type === 'push' ? arr.push(item) : arr.unshift(item);
        }
        else {
            arr[index] = item;
        }
        return arr;
    },
    arrayResert: (arr, item, index, type = 'push') => {
        arr = _.isArray(arr) ? arr : [];
        index = _.isNil(index) ? _.indexOf(arr, item) : index;
        if (index === -1) {
            type === 'push' ? arr.push(item) : arr.unshift(item);
        }
        else {
            arr.splice(index, 1);
        }
        return arr;
    },
    coerce: (value, defaultValue) => {
        return value === '' || _.isUndefined(value) ? defaultValue : (_.isNumber(value) ? Number(value) : value);
    },
    escapeRegExp: (str) => {
        return _(str).chain().replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d').value();
    },
    isStrictEmpty: (value) => {
        return _.isNil(value)
            || _.isEqual(value, {})
            || _.isEqual(value, [])
            || _.isEqual(_.trim(value), '');
    },
    matchAll: (regex, value) => {
        if (!regex || !value)
            return [];
        const matches = value.match(new RegExp(regex));
        return _.map(matches, (match) => new RegExp(regex).exec(match));
    },
    search: (str, match) => {
        if (!_.isString(str))
            return false;
        const searchRegExp = _.toSearchRegExp(match);
        return str.search(searchRegExp) >= 0
            || _(str)
                .chain()
                .split(' ')
                .map(0)
                .join('')
                .value()
                .search(searchRegExp) >= 0;
    },
    staticObservable: (value) => {
        return new Observable((observer) => { observer.next(value); observer.complete(); });
    },
    stripAccentedCharacters: (str) => {
        return str?.length
            ? _(str.normalize('NFD'))
                .chain()
                .replace(/\p{Diacritic}/gu, '')
                .replace(/đ/g, 'd')
                .replace(/Đ/g, 'D')
                .value()
            : '';
    },
    stripHtml: (html) => {
        return _.replace(html, /<[^>]*>?/gm, '');
    },
    toCommas: (num, isAddZero = false) => {
        if (!_.isFinite(num))
            return num;
        let n = String(isAddZero ? _.toPadNumber(num, 2) : num);
        n += '';
        const x = _.split(n, '.');
        const x2 = x.length > 1 ? '.' + x[1] : '';
        const rgx = /(\d+)(\d{3})/;
        let x1 = x[0];
        while (rgx.test(x1)) {
            x1 = _.replace(x1, rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
    },
    toFileSize: (fileSize, isAddZero = false) => {
        if (!fileSize || _.isNaN(fileSize))
            fileSize = 0;
        let n = fileSize;
        let unit = 'B';
        if (fileSize >= 1073741824) {
            n = fileSize / 1024 / 1024 / 1024;
            unit = 'GB';
        }
        else if (fileSize >= 1048576) {
            n = fileSize / 1024 / 1024;
            unit = 'MB';
        }
        else if (fileSize >= 1024) {
            n = fileSize / 1024;
            unit = 'KB';
        }
        return _(n).chain().toFixed().toCommas(isAddZero).value() + unit;
    },
    toFixed: (num, digits = 2) => {
        if (!_.isFinite(num) || num % 1 === 0)
            return num;
        const numArr = String(num).split('.');
        const first = numArr[0];
        const last = numArr[1].slice(0, digits);
        return Number([first, last].join('.'));
    },
    toKUnit: (num, isAddZero = false) => {
        let n = num;
        let unit = '';
        if (Math.abs(num) >= 1000000000) {
            n = num / 1000000000;
            unit = 'B';
        }
        else if (Math.abs(num) >= 1000000) {
            n = num / 1000000;
            unit = 'M';
        }
        else if (Math.abs(num) >= 1000) {
            n = num / 1000;
            unit = 'K';
        }
        return _(n).chain().toFixed().toCommas(isAddZero).value() + unit;
    },
    toPadNumber: (num, size) => {
        return _.padStart(String(num), size, '0');
    },
    toPercent: (num, max = 100, digits = 2) => {
        return Number((num * max).toFixed(digits));
    },
    toRegExp: (str, flags = 'g') => {
        return new RegExp(_.escapeRegExp(str), flags);
    },
    toRgb: (hex) => {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = _.replace(hex, shorthandRegex, (_m, r, g, b) => {
            return r + r + g + g + b + b;
        });
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
            }
            : undefined;
    },
    toSearchRegExp: (str, flags = 'gi') => {
        if (_.isEmpty(str))
            return;
        const arr = _.split(str, '');
        _.forEach(arr, (char, index) => {
            arr[index] = ACCENTED_CHARACTER_MAP[_.toLower(char)] || _.escapeRegExp(char);
        });
        return new RegExp(arr.join(''), flags);
    },
    toSearchString: (str, ignoreWhitespace) => {
        str = _(str).chain().stripAccentedCharacters().toLower().value();
        ignoreWhitespace && _.replace(str, / /g, '');
        return str;
    },
};
_.mixin(LODASH_MIXIN);
//# sourceMappingURL=data:application/json;base64,